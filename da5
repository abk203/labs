def is_safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
        
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
        
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
        
    return True
        
def n_queens(board, col):
    if col == len(board):
        return True
    
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1
            if n_queens(board, col + 1):
                return True
            board[i][col] = 0

    return False

def print_board(board):
    for row in board:
        print(" ".join("Q" if cell == 1 else "-" for cell in row))

chessboard = [[0 for _ in range(8)] for _ in range(8)]
chessboard[0][0] = 1

if n_queens(chessboard, 1):
    print("Solution found")
    print_board(chessboard)
else:
    print("Not found")
    print_board(chessboard)
