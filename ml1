import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pylab
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.ensemble import RandomForestRegressor
from sklearn import preprocessing

df = pd.read_csv("/Users/abhijeetkhandagale/Extras/beproject/uber.csv")

df = df.drop(["Unnamed: 0", "key"], axis=1)
df.isna().sum()

df['dropoff_latitude'].fillna(value=df['dropoff_latitude'].mean(),inplace = True)
df['dropoff_longitude'].fillna(value=df['dropoff_longitude'].median(),inplace = True)

incorrect_coordinates = df.loc[
    (df.pickup_latitude > 90) | (df.pickup_latitude < -90) |
    (df.dropoff_latitude > 90) | (df.dropoff_latitude < -90) |
    (df.pickup_longitude > 180) | (df.pickup_longitude < -180) |
    (df.dropoff_longitude > 90) | (df.dropoff_longitude < -180)
]

df.drop(incorrect_coordinates, inplace=True, errors='ignore')

df.pickup_datetime = pd.to_datetime(df.pickup_datetime)
df.dtypes

df = df.assign(hour = df.pickup_datetime.dt.hour,
               day = df.pickup_datetime.dt.day,
               month = df.pickup_datetime.dt.month,
               year = df.pickup_datetime.dt.year,
               dayofweek = df.pickup_datetime.dt.dayofweek
    )
df

df = df.drop(["pickup_datetime"], axis=1)
df

from math import *
def dist_formula(long1, latt1, long2, latt2):
    travel_dist = []
    for pos in range(len(long1)):
        lon1, lat1, lon2, lat2 = map(radians, [long1[pos], latt1[pos], long2[pos], latt2[pos]])
        dist_lon = lon2 - lon1
        dist_lat = lat2 - lat1

        a = sin(dist_lat/2)**2 + cos(lat1) * cos(lat2) * sin(dist_lon/2)**2

        c = 2 * asin(sqrt(a)) * 6371
        travel_dist.append(c)

    return travel_dist

    df["distance_travelled"] = dist_formula(df.pickup_longitude.to_numpy(), df.pickup_latitude.to_numpy(), df.dropoff_longitude.to_numpy(), df.dropoff_latitude.to_numpy())

    plt.scatter(df['distance_travelled'], df['fare_amount'])
plt.xlabel("distance_travelled")
plt.ylabel("fare_amount")
df.plot(kind="box", subplots=True, layout=(6, 2), figsize=(15, 20))

def remove_outlier(df1, col):
    Q3 = df1[col].quantile(0.75)
    Q1 = df1[col].quantile(0.25)
    IQR = Q3 - Q1
    lower_whisker = Q1 - 1.5 * IQR
    upper_whisker = Q3 + 1.5 * IQR
    df[col] = np.clip(df1[col], lower_whisker, upper_whisker)
    return df1

def treat_outliers(df1, col_list):
    for c in col_list:
        df1= remove_outlier(df, c)
    return df1

df = treat_outliers(df, df.iloc[:])

df.plot(kind="box", subplots=True, layout=(7, 2), figsize=(15, 20))

df.corr()

sns.heatmap(df.corr())

df_x = df[["pickup_longitude", "pickup_latitude", "dropoff_longitude", "dropoff_latitude", "passenger_count", "hour", "day", "month", "year"]]
df_y = df["fare_amount"]

x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.2, random_state=1)

from sklearn.linear_model import LinearRegression

reg = LinearRegression()

reg.fit(x_train, y_train)

y_pred_lin = reg.predict(x_test)
print(y_pred_lin)

rf = RandomForestRegressor(n_estimators=100)
rf.fit(x_train, y_train)

y_predrf = rf.predict(x_test)
print(y_predrf)

from sklearn.metrics import r2_score

reg_rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred_lin))
reg_r2 = r2_score(y_test, y_pred_lin)

print("rmse: ", reg_rmse)
print("r2: ", reg_r2)

rf_rmse = np.sqrt(metrics.mean_squared_error(y_test, y_predrf))
rf_r2 = r2_score(y_test, y_predrf)
print("Rmse: ", rf_rmse)
print("r2: ", rf_r2)
